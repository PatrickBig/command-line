// <auto-generated />
// Generated by DotMake.CommandLine.SourceGeneration v1.5.0.0
// Roslyn (Microsoft.CodeAnalysis) v4.800.23.57201
// Generation: 1

namespace TestApp.Commands
{
    public class ArgumentConverterCliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
    {
        public ArgumentConverterCliCommandBuilder()
        {
            DefinitionType = typeof(TestApp.Commands.ArgumentConverterCliCommand);
            ParentDefinitionType = null;
            NameCasingConvention = DotMake.CommandLine.CliNameCasingConvention.KebabCase;
            NamePrefixConvention = DotMake.CommandLine.CliNamePrefixConvention.DoubleHyphen;
            ShortFormPrefixConvention = DotMake.CommandLine.CliNamePrefixConvention.SingleHyphen;
            ShortFormAutoGenerate = true;
        }

        public override System.CommandLine.RootCommand Build()
        {
            // Command for 'ArgumentConverterCliCommand' class
            var rootCommand = new System.CommandLine.RootCommand()
            {
            };

            var defaultClass = new TestApp.Commands.ArgumentConverterCliCommand();

            // Option for 'Opt' property
            var option0 = new System.CommandLine.Option<TestApp.Commands.ClassWithConstructor>("--opt")
            {
            };
            option0.SetDefaultValue(defaultClass.Opt);
            option0.AddAlias("-o");
            RegisterArgumentConverter(input => new TestApp.Commands.ClassWithConstructor(input));
            rootCommand.Add(option0);

            // Option for 'OptArray' property
            var option1 = new System.CommandLine.Option<TestApp.Commands.ClassWithConstructor[]>("--opt-array")
            {
            };
            option1.SetDefaultValue(defaultClass.OptArray);
            RegisterArgumentConverter(input => new TestApp.Commands.ClassWithConstructor(input));
            rootCommand.Add(option1);

            // Option for 'OptNullable' property
            var option2 = new System.CommandLine.Option<TestApp.Commands.CustomStruct?>("--opt-nullable")
            {
            };
            option2.SetDefaultValue(defaultClass.OptNullable);
            RegisterArgumentConverter(input => new TestApp.Commands.CustomStruct(input));
            rootCommand.Add(option2);

            // Option for 'OptEnumerable' property
            var option3 = new System.CommandLine.Option<System.Collections.Generic.IEnumerable<TestApp.Commands.ClassWithConstructor>>("--opt-enumerable")
            {
            };
            option3.SetDefaultValue(defaultClass.OptEnumerable);
            RegisterArgumentConverter(input => new TestApp.Commands.ClassWithConstructor(input));
            rootCommand.Add(option3);

            // Option for 'OptList' property
            var option4 = new System.CommandLine.Option<System.Collections.Generic.List<TestApp.Commands.ClassWithConstructor>>("--opt-list")
            {
            };
            option4.SetDefaultValue(defaultClass.OptList);
            RegisterArgumentConverter(input => new TestApp.Commands.ClassWithConstructor(input));
            rootCommand.Add(option4);

            // Argument for 'Arg' property
            var argument0 = new System.CommandLine.Argument<System.Collections.Generic.IEnumerable<TestApp.Commands.Sub.ClassWithParser>>("arg")
            {
            };
            argument0.SetDefaultValue(defaultClass.Arg);
            RegisterArgumentConverter(input => TestApp.Commands.Sub.ClassWithParser.Parse(input));
            rootCommand.Add(argument0);

            // Add nested or external registered children
            foreach (var child in Children)
            {
                rootCommand.Add(child.Build());
            }

            BindFunc = (parseResult) =>
            {
                var targetClass = new TestApp.Commands.ArgumentConverterCliCommand();

                //  Set the parsed or default values for the options
                targetClass.Opt = parseResult.GetValueForOption(option0);
                targetClass.OptArray = parseResult.GetValueForOption(option1);
                targetClass.OptNullable = parseResult.GetValueForOption(option2);
                targetClass.OptEnumerable = parseResult.GetValueForOption(option3);
                targetClass.OptList = parseResult.GetValueForOption(option4);

                //  Set the parsed or default values for the arguments
                targetClass.Arg = parseResult.GetValueForArgument(argument0);

                return targetClass;
            };

            System.CommandLine.Handler.SetHandler(rootCommand, context =>
            {
                var targetClass = (TestApp.Commands.ArgumentConverterCliCommand) BindFunc(context.ParseResult);

                //  Call the command handler
                targetClass.Run();
            });

            return rootCommand;
        }

        [System.Runtime.CompilerServices.ModuleInitializerAttribute]
        public static void Initialize()
        {
            var commandBuilder = new TestApp.Commands.ArgumentConverterCliCommandBuilder();

            // Register this command builder so that it can be found by the definition class
            // and it can be found by the parent definition class if it's a nested/external child.
            commandBuilder.Register();
        }
    }
}
