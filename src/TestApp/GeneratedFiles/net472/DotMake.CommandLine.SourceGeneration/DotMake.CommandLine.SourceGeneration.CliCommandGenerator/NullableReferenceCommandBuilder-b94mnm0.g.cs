// <auto-generated />
// Generated by DotMake.CommandLine.SourceGeneration v1.6.6.0
// Roslyn (Microsoft.CodeAnalysis) v4.800.23.57201
// Generation: 1

namespace TestApp.Commands
{
    /// <inheritdoc />
    public class NullableReferenceCommandBuilder : DotMake.CommandLine.CliCommandBuilder
    {
        /// <inheritdoc />
        public NullableReferenceCommandBuilder()
        {
            DefinitionType = typeof(TestApp.Commands.NullableReferenceCommand);
            ParentDefinitionType = null;
            NameCasingConvention = DotMake.CommandLine.CliNameCasingConvention.KebabCase;
            NamePrefixConvention = DotMake.CommandLine.CliNamePrefixConvention.DoubleHyphen;
            ShortFormPrefixConvention = DotMake.CommandLine.CliNamePrefixConvention.SingleHyphen;
            ShortFormAutoGenerate = true;
        }

        private TestApp.Commands.NullableReferenceCommand CreateInstance()
        {
            return new TestApp.Commands.NullableReferenceCommand();
        }

        /// <inheritdoc />
        public override System.CommandLine.Command Build()
        {
            // Command for 'NullableReferenceCommand' class
            var rootCommand = new System.CommandLine.RootCommand()
            {
            };

            var defaultClass = CreateInstance();

            // Option for 'Display' property
            var option0 = new System.CommandLine.Option<string>
            (
                "--display",
                GetParseArgument<string>
                (
                    null
                )
            )
            {
                Description = "Description for Display",
                IsRequired = true,
            };
            System.CommandLine.OptionExtensions.FromAmong(option0, new[] {"Big", "Small"});
            option0.AddAlias("-d");
            rootCommand.Add(option0);

            // Option for 'Display2' property
            var option1 = new System.CommandLine.Option<string>
            (
                "--display-2",
                GetParseArgument<string>
                (
                    null
                )
            )
            {
                Description = "Description for Display2",
                IsRequired = true,
            };
            System.CommandLine.OptionExtensions.FromAmong(option1, new[] {"Big", "Small"});
            rootCommand.Add(option1);

            // Option for 'ReqOption' property
            var option2 = new System.CommandLine.Option<string>
            (
                "--req",
                GetParseArgument<string>
                (
                    null
                )
            )
            {
                IsRequired = true,
            };
            option2.AddAlias("-r");
            rootCommand.Add(option2);

            // Argument for 'NullableRefArg' property
            var argument0 = new System.CommandLine.Argument<string[]>
            (
                "nullable-ref-arg",
                GetParseArgument<string[], string>
                (
                    array => (string[])array,
                    null
                )
            )
            {
            };
            argument0.SetDefaultValue(defaultClass.NullableRefArg);
            rootCommand.Add(argument0);

            // Argument for 'ReqArg' property
            var argument1 = new System.CommandLine.Argument<string>
            (
                "req-arg",
                GetParseArgument<string>
                (
                    null
                )
            )
            {
            };
            rootCommand.Add(argument1);

            // Add nested or external registered children
            foreach (var child in Children)
            {
                rootCommand.Add(child.Build());
            }

            BindFunc = (parseResult) =>
            {
                var targetClass = CreateInstance();

                //  Set the parsed or default values for the options
                targetClass.Display = GetValueForOption(parseResult, option0);
                targetClass.Display2 = GetValueForOption(parseResult, option1);
                targetClass.ReqOption = GetValueForOption(parseResult, option2);

                //  Set the parsed or default values for the arguments
                targetClass.NullableRefArg = GetValueForArgument(parseResult, argument0);
                targetClass.ReqArg = GetValueForArgument(parseResult, argument1);

                return targetClass;
            };

            System.CommandLine.Handler.SetHandler(rootCommand, context =>
            {
                var targetClass = (TestApp.Commands.NullableReferenceCommand) BindFunc(context.ParseResult);

                //  Call the command handler
                targetClass.Run(context);
            });

            return rootCommand;
        }

        [System.Runtime.CompilerServices.ModuleInitializerAttribute]
        internal static void Initialize()
        {
            var commandBuilder = new TestApp.Commands.NullableReferenceCommandBuilder();

            // Register this command builder so that it can be found by the definition class
            // and it can be found by the parent definition class if it's a nested/external child.
            commandBuilder.Register();
        }
    }
}
