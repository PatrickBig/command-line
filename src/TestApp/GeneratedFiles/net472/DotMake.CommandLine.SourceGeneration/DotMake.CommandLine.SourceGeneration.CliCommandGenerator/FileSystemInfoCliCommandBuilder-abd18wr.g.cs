// <auto-generated />
// Generated by DotMake.CommandLine.SourceGeneration v1.6.6.0
// Roslyn (Microsoft.CodeAnalysis) v4.800.23.57201
// Generation: 1

namespace TestApp.Commands
{
    /// <inheritdoc />
    public class FileSystemInfoCliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
    {
        /// <inheritdoc />
        public FileSystemInfoCliCommandBuilder()
        {
            DefinitionType = typeof(TestApp.Commands.FileSystemInfoCliCommand);
            ParentDefinitionType = null;
            NameCasingConvention = DotMake.CommandLine.CliNameCasingConvention.KebabCase;
            NamePrefixConvention = DotMake.CommandLine.CliNamePrefixConvention.DoubleHyphen;
            ShortFormPrefixConvention = DotMake.CommandLine.CliNamePrefixConvention.SingleHyphen;
            ShortFormAutoGenerate = true;
        }

        private TestApp.Commands.FileSystemInfoCliCommand CreateInstance()
        {
            return new TestApp.Commands.FileSystemInfoCliCommand();
        }

        /// <inheritdoc />
        public override System.CommandLine.Command Build()
        {
            // Command for 'FileSystemInfoCliCommand' class
            var rootCommand = new System.CommandLine.RootCommand()
            {
                Description = "A cli command with input (must exists) files and or directories",
            };

            var defaultClass = CreateInstance();

            // Option for 'Option1' property
            var option0 = new System.CommandLine.Option<System.IO.FileInfo>
            (
                "--option-1",
                GetParseArgument<System.IO.FileInfo>
                (
                    null
                )
            )
            {
                Description = "Optional input file (must exists)",
                IsRequired = false,
            };
            option0.SetDefaultValue(defaultClass.Option1);
            option0.AddAlias("-o");
            System.CommandLine.OptionExtensions.ExistingOnly(option0);
            rootCommand.Add(option0);

            // Option for 'Option2' property
            var option1 = new System.CommandLine.Option<System.IO.DirectoryInfo>
            (
                "--option-2",
                GetParseArgument<System.IO.DirectoryInfo>
                (
                    null
                )
            )
            {
                Description = "Optional input directory (must exists)",
                IsRequired = false,
            };
            option1.SetDefaultValue(defaultClass.Option2);
            System.CommandLine.OptionExtensions.ExistingOnly(option1);
            rootCommand.Add(option1);

            // Argument for 'Argument1' property
            var argument0 = new System.CommandLine.Argument<System.IO.FileSystemInfo>
            (
                "argument-1",
                GetParseArgument<System.IO.FileSystemInfo>
                (
                    null
                )
            )
            {
                Description = "Input file or directory (must exists)",
            };
            System.CommandLine.ArgumentExtensions.ExistingOnly(argument0);
            rootCommand.Add(argument0);

            // Add nested or external registered children
            foreach (var child in Children)
            {
                rootCommand.Add(child.Build());
            }

            BindFunc = (parseResult) =>
            {
                var targetClass = CreateInstance();

                //  Set the parsed or default values for the options
                targetClass.Option1 = GetValueForOption(parseResult, option0);
                targetClass.Option2 = GetValueForOption(parseResult, option1);

                //  Set the parsed or default values for the arguments
                targetClass.Argument1 = GetValueForArgument(parseResult, argument0);

                return targetClass;
            };

            System.CommandLine.Handler.SetHandler(rootCommand, context =>
            {
                var targetClass = (TestApp.Commands.FileSystemInfoCliCommand) BindFunc(context.ParseResult);

                //  Call the command handler
                targetClass.Run();
            });

            return rootCommand;
        }

        [System.Runtime.CompilerServices.ModuleInitializerAttribute]
        internal static void Initialize()
        {
            var commandBuilder = new TestApp.Commands.FileSystemInfoCliCommandBuilder();

            // Register this command builder so that it can be found by the definition class
            // and it can be found by the parent definition class if it's a nested/external child.
            commandBuilder.Register();
        }
    }
}
