<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;net6.0</TargetFrameworks>
    <LangVersion>10.0</LangVersion>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>

    <!--
      IsTrimmable to enable trim warnings
      https://learn.microsoft.com/en-us/dotnet/core/deploying/trimming/prepare-libraries-for-trimming?pivots=dotnet-6-0#enable-project-specific-trimming    

      IsAotCompatible to enable trim warnings (also enables IsTrimmable but it's only for net.8.0)
      https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/?tabs=net8plus%2Cwindows#aot-compatibility-analyzers
    -->
    <IsTrimmable>true</IsTrimmable>
    <IsAotCompatible Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net7.0'))">true</IsAotCompatible>

    <!-- NuGet Package Information (common ones are in Directory.Build.props) -->
    <!-- Description is used for assembly and NuGet metadata -->
    <Description>Declarative syntax for System.CommandLine via attributes for easy, fast, strongly-typed (no reflection) usage. Includes a source generator which automagically converts your classes to CLI commands and properties to CLI options or CLI arguments.</Description>
    <PackageTags>command-line CLI console System.CommandLine declarative attributes parsing command argument option generator</PackageTags>
    <PackageReleaseNotes>
      - Added support for SuppressNullableWarningExpression and C# 11 `required` modifier:

        An option/argument will be considered required when
          - There is no property initializer and the property type is a reference type (e.g. `public string Arg { get; set; }`).
          `string` is a reference type which has a null as the default value but `bool` and `enum` are value
          types which already have non-null default values. `Nullable&lt;T&gt;` is a reference type, e.g. `bool?`.
          - There is a property initializer, but it's initialized with `null` or `null!` (SuppressNullableWarningExpression)
          (e.g. `public string Arg { get; set; } = null!;`).
          - If it's forced via attribute property `Required` (e.g. `[CliArgument(Required = true)]`).
          - If it's forced via `required` modifier (e.g. `public required string Opt { get; set; }`).
          Note that for being able to use `required` modifier, if your target framework is below net7.0,
          you also need `&lt;LangVersion&gt;11.0&lt;/LangVersion&gt;` tag (minimum) in your .csproj file
          (our source generator supplies the polyfills automatically as long as you set C# language version to 11).

        An option/argument will be considered optional when
          - There is no property initializer (e.g. `public bool Opt { get; set; }`) but the property type is a value type
          
      - Added AllowExisting property to [CliOption] and [CliArgument] which gets or sets a value indicating whether
        an argument should accept only values corresponding to an existing file or directory.
    </PackageReleaseNotes>
  </PropertyGroup>

  <Import Project="..\DotMake.CommandLine.Shared\DotMake.CommandLine.Shared.projitems" Label="Shared" />

  <ItemGroup>
    <PackageReference Include="System.CommandLine" Version="2.0.0-beta4.22272.1" />
  </ItemGroup>

  <ItemGroup>
    <!-- 
      https://github.com/dotnet/roslyn/issues/55229 
      https://stackoverflow.com/a/69193922
    -->
    <!-- Ensure that the source generator is built together with this project -->
    <ProjectReference Include="..\$(MSBuildProjectName).SourceGeneration\$(MSBuildProjectName).SourceGeneration.csproj">
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
    </ProjectReference>
    <!-- Package the generator in the analyzer directory of the nuget package -->
    <None Include="..\$(MSBuildProjectName).SourceGeneration\$(OutputPath)\netstandard2.0\*.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
  </ItemGroup>

  <ItemGroup>
    <None Remove="*.DotSettings" />
  </ItemGroup>

</Project>
