<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;net6.0</TargetFrameworks>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>

    <!--
      IsTrimmable to enable trim warnings
      https://learn.microsoft.com/en-us/dotnet/core/deploying/trimming/prepare-libraries-for-trimming?pivots=dotnet-6-0#enable-project-specific-trimming    

      IsAotCompatible to enable trim warnings (also enables IsTrimmable but it's only for net.8.0)
      https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/?tabs=net8plus%2Cwindows#aot-compatibility-analyzers
    -->
    <IsTrimmable>true</IsTrimmable>
    <IsAotCompatible Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net7.0'))">true</IsAotCompatible>

    <!-- NuGet Package Information (common ones are in Directory.Build.props) -->
    <!-- Description is used for assembly and NuGet metadata -->
    <Description>Declarative syntax for System.CommandLine via attributes for easy, fast, strongly-typed (no reflection) usage. Includes a source generator which automagically converts your classes to CLI commands and properties to CLI options or CLI arguments.</Description>
    <PackageTags>command-line CLI console System.CommandLine declarative attributes parsing command argument option generator</PackageTags>
    <PackageReleaseNotes>
      - Fixed: inheritance logic for CliOption and CliArgument attributes, the attibute from the most derived property should be used
        and other ones should be ignored (double option or argument should not be created).
      - Added: Cli.GetArgs method which returns the same as the special variable `args` available in `Program.cs` (new style with top-level statements)
        or as the string array passed to the program's `Main` method (old style).
        For more more concise syntax when writing cli apps, made `args` parameter optional for Cli.Run, Cli.RunAsync and Cli.Parse methods
        so user does not have to specify it, i.e. it will be retrieved automatically from the process with Cli.GetArgs.
    </PackageReleaseNotes>
  </PropertyGroup>

  <Import Project="..\DotMake.CommandLine.Shared\DotMake.CommandLine.Shared.projitems" Label="Shared" />

  <ItemGroup>
    <PackageReference Include="System.CommandLine" Version="2.0.0-beta4.22272.1" />
  </ItemGroup>

  <ItemGroup>
    <!-- 
      https://github.com/dotnet/roslyn/issues/55229 
      https://stackoverflow.com/a/69193922
    -->
    <!-- Ensure that the source generator is built together with this project -->
    <ProjectReference Include="..\$(MSBuildProjectName).SourceGeneration\$(MSBuildProjectName).SourceGeneration.csproj">
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
    </ProjectReference>
    <!-- Package the generator in the analyzer directory of the nuget package -->
    <None Include="..\$(MSBuildProjectName).SourceGeneration\$(OutputPath)\netstandard2.0\*.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
  </ItemGroup>

  <ItemGroup>
    <None Remove="*.DotSettings" />
  </ItemGroup>

</Project>
